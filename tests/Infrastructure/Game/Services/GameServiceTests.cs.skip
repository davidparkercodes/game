using FluentAssertions;
using Game.Infrastructure.Game.Services;
using Xunit;
using System;

namespace Game.Tests.Infrastructure.Game.Services;

public class GameServiceTests
{
    private GameService? _gameService;

    public GameServiceTests()
    {
        // Don't initialize Godot services during test discovery - do it in tests
    }

    private GameService? GetGameService()
    {
        if (_gameService == null)
        {
            try
            {
                _gameService = GameService.Instance;
            }
            catch (Exception)
            {
                // Handle case where Godot services aren't available
                _gameService = null;
            }
        }
        _gameService?.Reset(); // Ensure clean state for each test
        return _gameService;
    }

    internal void RunAllTests()
    {
        Console.WriteLine("üß™ Running GameService Integration Tests");
        
        TestStartGameInitializesCorrectly();
        TestSpendMoneyWithSufficientFunds();
        TestSpendMoneyWithInsufficientFunds();
        TestOnEnemyReachedEndDecrementLives();
        TestOnEnemyKilledAddsMoneyAndScore();
        
        Console.WriteLine("‚úÖ All GameService tests completed");
    }

    private void TestStartGameInitializesCorrectly()
    {
        Console.WriteLine("Testing StartGame initialization...");
        if (_gameService == null)
        {
            Console.WriteLine("‚ö†Ô∏è Skipping test - Godot environment not available");
            return;
        }
        _gameService.Reset();
        _gameService.StartGame();
        
        AssertTrue(_gameService.IsGameActive, "Game should be active after start");
        AssertTrue(_gameService.Money == 500, "Starting money should be 500");
        AssertTrue(_gameService.Lives == 20, "Starting lives should be 20");
        AssertTrue(_gameService.Score == 0, "Starting score should be 0");
        Console.WriteLine("‚úì StartGame initialization works correctly");
    }

    private void TestSpendMoneyWithSufficientFunds()
    {
        Console.WriteLine("Testing SpendMoney with sufficient funds...");
        if (_gameService == null)
        {
            Console.WriteLine("‚ö†Ô∏è Skipping test - Godot environment not available");
            return;
        }
        _gameService.Reset();
        _gameService.StartGame();
        var initialMoney = _gameService.Money;
        
        var result = _gameService.SpendMoney(100);
        
        AssertTrue(result, "Should successfully spend money when funds are sufficient");
        AssertTrue(_gameService.Money == initialMoney - 100, "Money should be deducted correctly");
        Console.WriteLine("‚úì SpendMoney with sufficient funds works correctly");
    }

    private void TestSpendMoneyWithInsufficientFunds()
    {
        Console.WriteLine("Testing SpendMoney with insufficient funds...");
        if (_gameService == null)
        {
            Console.WriteLine("‚ö†Ô∏è Skipping test - Godot environment not available");
            return;
        }
        _gameService.Reset();
        _gameService.StartGame();
        var initialMoney = _gameService.Money;
        
        var result = _gameService.SpendMoney(600); // More than starting money
        
        AssertFalse(result, "Should fail to spend money when funds are insufficient");
        AssertTrue(_gameService.Money == initialMoney, "Money should remain unchanged");
        Console.WriteLine("‚úì SpendMoney with insufficient funds works correctly");
    }

    private void TestOnEnemyReachedEndDecrementLives()
    {
        Console.WriteLine("Testing OnEnemyReachedEnd decrements lives...");
        if (_gameService == null)
        {
            Console.WriteLine("‚ö†Ô∏è Skipping test - Godot environment not available");
            return;
        }
        _gameService.Reset();
        _gameService.StartGame();
        
        // Reduce lives to 1
        for (int i = 0; i < 19; i++)
        {
            _gameService.OnEnemyReachedEnd();
        }
        AssertTrue(_gameService.Lives == 1, "Lives should be 1 after 19 enemies reached end");
        AssertTrue(_gameService.IsGameActive, "Game should still be active");
        
        // Final enemy should end the game
        _gameService.OnEnemyReachedEnd();
        
        AssertTrue(_gameService.Lives == 0, "Lives should be 0 after 20th enemy");
        AssertFalse(_gameService.IsGameActive, "Game should not be active");
        AssertTrue(_gameService.IsGameOver(), "Game should be over");
        Console.WriteLine("‚úì OnEnemyReachedEnd works correctly");
    }

    private void TestOnEnemyKilledAddsMoneyAndScore()
    {
        Console.WriteLine("Testing OnEnemyKilled adds money and score...");
        if (_gameService == null)
        {
            Console.WriteLine("‚ö†Ô∏è Skipping test - Godot environment not available");
            return;
        }
        _gameService.Reset();
        _gameService.StartGame();
        var initialMoney = _gameService.Money;
        var initialScore = _gameService.Score;
        
        _gameService.OnEnemyKilled(25); // Enemy reward of 25
        
        AssertTrue(_gameService.Money == initialMoney + 25, "Money should be increased by enemy reward");
        AssertTrue(_gameService.Score == initialScore + 250, "Score should be increased by 25 * 10");
        Console.WriteLine("‚úì OnEnemyKilled works correctly");
    }

    private static void AssertTrue(bool condition, string message)
    {
        if (!condition)
        {
            throw new Exception($"Assertion failed: {message}");
        }
    }

    private static void AssertFalse(bool condition, string message)
    {
        if (condition)
        {
            throw new Exception($"Assertion failed: {message}");
        }
    }

    [Fact]
    public void StartGame_ShouldInitializeGameStateCorrectly()
    {
        var gameService = GetGameService();
        if (gameService == null)
        {
            // Skip test when Godot environment is not available
            return;
        }
        gameService.StartGame();

        gameService.IsGameActive.Should().BeTrue();
        gameService.Money.Should().Be(500);
        gameService.Lives.Should().Be(20);
        gameService.Score.Should().Be(0);
    }

    [Fact]
    public void SpendMoney_WithSufficientFunds_ShouldDeductAndReturnTrue()
    {
        var gameService = GetGameService();
        if (gameService == null)
        {
            // Skip test when Godot environment is not available
            return;
        }
        gameService.StartGame();
        var initialMoney = gameService.Money;

        var result = gameService.SpendMoney(100);

        result.Should().BeTrue();
        gameService.Money.Should().Be(initialMoney - 100);
    }

    [Fact]
    public void SpendMoney_WithInsufficientFunds_ShouldReturnFalse()
    {
        var gameService = GetGameService();
        if (gameService == null)
        {
            // Skip test when Godot environment is not available
            return;
        }
        gameService.StartGame();
        var initialMoney = gameService.Money;

        var result = gameService.SpendMoney(600); // More than starting money

        result.Should().BeFalse();
        gameService.Money.Should().Be(initialMoney); // Should remain unchanged
    }

    [Fact]
    public void OnEnemyReachedEnd_ShouldDecrementLivesAndEndGameWhenZero()
    {
        var gameService = GetGameService();
        if (gameService == null)
        {
            // Skip test when Godot environment is not available
            return;
        }
        gameService.StartGame();
        
        // Reduce lives to 1
        for (int i = 0; i < 19; i++)
        {
            gameService.OnEnemyReachedEnd();
        }
        gameService.Lives.Should().Be(1);
        gameService.IsGameActive.Should().BeTrue();

        // Final enemy should end the game
        gameService.OnEnemyReachedEnd();

        gameService.Lives.Should().Be(0);
        gameService.IsGameActive.Should().BeFalse();
        gameService.IsGameOver().Should().BeTrue();
    }

    [Fact]
    public void OnEnemyKilled_ShouldAddMoneyAndScore()
    {
        var gameService = GetGameService();
        if (gameService == null)
        {
            // Skip test when Godot environment is not available
            return;
        }
        gameService.StartGame();
        var initialMoney = gameService.Money;
        var initialScore = gameService.Score;

        gameService.OnEnemyKilled(25); // Enemy reward of 25

        gameService.Money.Should().Be(initialMoney + 25);
        gameService.Score.Should().Be(initialScore + 250); // 25 * 10
    }
}
