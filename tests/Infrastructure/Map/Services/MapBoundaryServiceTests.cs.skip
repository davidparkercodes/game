using Game.Infrastructure.Map.Services;
using Game.Domain.Map.Services;
using Game.Domain.Map.Interfaces;
using Game.Domain.Common.Types;
using System;
using System.Collections.Generic;

namespace Game.Tests.Infrastructure.Map.Services;

public class MapBoundaryServiceTests
{
    private readonly MapBoundaryService _mapBoundaryService;
    private readonly MockTileMapLayer _mockTileMapLayer;

    public MapBoundaryServiceTests()
    {
        _mapBoundaryService = new MapBoundaryService();
        _mockTileMapLayer = new MockTileMapLayer();
    }

    public void RunAllTests()
    {
        Console.WriteLine("ðŸ§ª Running MapBoundaryService Integration Tests");
        
        TestInitializationSetsUpBoundaryData();
        TestCanWalkToPositionValidatesMapBounds();
        TestCanBuildAtPositionRestrictsToWhiteTiles();
        TestPositionClampingEnforcesBoundaries();
        TestAbyssBufferZoneDetection();
        TestBoundaryCalculationHandlesEmptyMaps();
        
        Console.WriteLine("âœ… All MapBoundaryService tests completed");
    }

    private void TestInitializationSetsUpBoundaryData()
    {
        Console.WriteLine("Testing boundary service initialization...");
        
        _mockTileMapLayer.SetupBasicMap();
        _mapBoundaryService.Initialize(_mockTileMapLayer);
        
        AssertTrue(_mapBoundaryService.IsInitialized, "Service should be initialized after setup");
        
        var mapBounds = _mapBoundaryService.GetMapBounds();
        AssertTrue(mapBounds.Size.X > 0 && mapBounds.Size.Y > 0, "Map bounds should have valid dimensions");
        
        Console.WriteLine("âœ“ Boundary service initialization works correctly");
    }

    private void TestCanWalkToPositionValidatesMapBounds()
    {
        Console.WriteLine("Testing walking position validation...");
        
        _mockTileMapLayer.SetupBasicMap();
        _mapBoundaryService.Initialize(_mockTileMapLayer);
        
        var centerPosition = new Vector2(64, 64);
        AssertTrue(_mapBoundaryService.CanWalkToPosition(centerPosition), "Should allow walking within map bounds");
        
        var outsidePosition = new Vector2(-100, -100);
        AssertFalse(_mapBoundaryService.CanWalkToPosition(outsidePosition), "Should not allow walking outside map bounds");
        
        var positionWithoutTile = new Vector2(500, 500);
        if (!_mockTileMapLayer.HasTileAt(positionWithoutTile))
        {
            AssertFalse(_mapBoundaryService.CanWalkToPosition(positionWithoutTile), "Should not allow walking where no tile exists");
        }
        
        Console.WriteLine("âœ“ Walking position validation works correctly");
    }

    private void TestCanBuildAtPositionRestrictsToWhiteTiles()
    {
        Console.WriteLine("Testing building position validation...");
        
        _mockTileMapLayer.SetupBasicMap();
        _mapBoundaryService.Initialize(_mockTileMapLayer);
        
        var blackTilePosition = new Vector2(32, 32);
        _mockTileMapLayer.SetTileType(blackTilePosition, MockTileMapLayer.TileType.Black);
        AssertFalse(_mapBoundaryService.CanBuildAtPosition(blackTilePosition), "Should not allow building on black tiles (wave paths)");
        
        var whiteTilePosition = new Vector2(96, 96);
        _mockTileMapLayer.SetTileType(whiteTilePosition, MockTileMapLayer.TileType.White);
        AssertTrue(_mapBoundaryService.CanBuildAtPosition(whiteTilePosition), "Should allow building on white tiles");
        
        var outsidePosition = new Vector2(-50, -50);
        AssertFalse(_mapBoundaryService.CanBuildAtPosition(outsidePosition), "Should not allow building outside map bounds");
        
        Console.WriteLine("âœ“ Building position validation works correctly");
    }

    private void TestPositionClampingEnforcesBoundaries()
    {
        Console.WriteLine("Testing position clamping...");
        
        _mockTileMapLayer.SetupBasicMap();
        _mapBoundaryService.Initialize(_mockTileMapLayer);
        
        var mapBounds = _mapBoundaryService.GetMapBounds();
        var outsidePosition = new Vector2(mapBounds.End.X + 100, mapBounds.End.Y + 100);
        var clampedPosition = _mapBoundaryService.ClampToValidPosition(outsidePosition);
        
        AssertTrue(_mapBoundaryService.IsWithinMapBounds(clampedPosition), "Clamped position should be within map bounds");
        AssertTrue(clampedPosition.X <= mapBounds.End.X, "Clamped X should not exceed map boundary");
        AssertTrue(clampedPosition.Y <= mapBounds.End.Y, "Clamped Y should not exceed map boundary");
        
        var insidePosition = new Vector2(64, 64);
        var unchangedPosition = _mapBoundaryService.ClampToValidPosition(insidePosition);
        AssertTrue(unchangedPosition.X == insidePosition.X && unchangedPosition.Y == insidePosition.Y, 
                  "Position within bounds should remain unchanged");
        
        Console.WriteLine("âœ“ Position clamping works correctly");
    }

    private void TestAbyssBufferZoneDetection()
    {
        Console.WriteLine("Testing abyss buffer zone detection...");
        
        _mockTileMapLayer.SetupBasicMap();
        _mapBoundaryService.Initialize(_mockTileMapLayer);
        
        var mapBounds = _mapBoundaryService.GetMapBounds();
        var bufferDistance = _mapBoundaryService.GetAbyssBufferDistance();
        
        var slightlyOutsidePosition = new Vector2(mapBounds.End.X + 10, mapBounds.End.Y + 10);
        AssertTrue(_mapBoundaryService.IsInAbyssBufferZone(slightlyOutsidePosition), 
                  "Position just outside map should be in abyss buffer zone");
        
        var farOutsidePosition = new Vector2(mapBounds.End.X + bufferDistance + 50, mapBounds.End.Y + bufferDistance + 50);
        AssertFalse(_mapBoundaryService.IsInAbyssBufferZone(farOutsidePosition), 
                   "Position far outside buffer should not be in abyss buffer zone");
        
        var insidePosition = new Vector2(64, 64);
        AssertFalse(_mapBoundaryService.IsInAbyssBufferZone(insidePosition), 
                   "Position inside map should not be in abyss buffer zone");
        
        Console.WriteLine("âœ“ Abyss buffer zone detection works correctly");
    }

    private void TestBoundaryCalculationHandlesEmptyMaps()
    {
        Console.WriteLine("Testing boundary calculation with empty map...");
        
        var emptyMapLayer = new MockTileMapLayer();
        var emptyMapService = new MapBoundaryService();
        
        emptyMapService.Initialize(emptyMapLayer);
        
        var bounds = emptyMapService.GetMapBounds();
        AssertTrue(bounds.Size.X == 0 && bounds.Size.Y == 0, "Empty map should have zero-size bounds");
        
        var testPosition = new Vector2(100, 100);
        AssertFalse(emptyMapService.CanWalkToPosition(testPosition), "Empty map should not allow walking anywhere");
        AssertFalse(emptyMapService.CanBuildAtPosition(testPosition), "Empty map should not allow building anywhere");
        
        Console.WriteLine("âœ“ Empty map boundary calculation works correctly");
    }

    private static void AssertTrue(bool condition, string message)
    {
        if (!condition)
        {
            throw new Exception($"Assertion failed: {message}");
        }
    }

    private static void AssertFalse(bool condition, string message)
    {
        if (condition)
        {
            throw new Exception($"Assertion failed: {message}");
        }
    }
}

public class MockTileMapLayer : ITileMapLayer
{
    public enum TileType { Empty, Black, White }
    
    private readonly Dictionary<(int x, int y), TileType> _tiles = new();
    private Vector2I _mapSize = new(10, 10);

    public void SetupBasicMap()
    {
        for (int x = 0; x < _mapSize.X; x++)
        {
            for (int y = 0; y < _mapSize.Y; y++)
            {
                _tiles[(x, y)] = TileType.White;
            }
        }
        
        _tiles[(1, 1)] = TileType.Black;
        _tiles[(2, 2)] = TileType.Black;
        _tiles[(3, 3)] = TileType.Black;
    }

    public void SetTileType(Vector2 worldPosition, TileType tileType)
    {
        var tileCoords = LocalToMap(ToLocal(worldPosition));
        _tiles[(tileCoords.X, tileCoords.Y)] = tileType;
    }

    public bool HasTileAt(Vector2 worldPosition)
    {
        var tileCoords = LocalToMap(ToLocal(worldPosition));
        return _tiles.ContainsKey((tileCoords.X, tileCoords.Y));
    }

    public Rect2I GetUsedRect()
    {
        if (_tiles.Count == 0)
            return new Rect2I();
        
        return new Rect2I(new Vector2I(0, 0), _mapSize);
    }

    public Vector2 MapToLocal(Vector2I mapCoords)
    {
        return new Vector2(mapCoords.X * 16, mapCoords.Y * 16);
    }

    public Vector2I LocalToMap(Vector2 localPosition)
    {
        return new Vector2I((int)(localPosition.X / 16), (int)(localPosition.Y / 16));
    }

    public Vector2 ToLocal(Vector2 globalPosition)
    {
        return globalPosition;
    }

    public object? GetCellTileData(Vector2I coords)
    {
        if (_tiles.TryGetValue((coords.X, coords.Y), out var tileType) && tileType != TileType.Empty)
        {
            return new object(); // Simple non-null object for Godot TileData compatibility
        }
        return null;
    }

    public int GetCellSourceId(Vector2I coords)
    {
        return _tiles.ContainsKey((coords.X, coords.Y)) ? 0 : -1;
    }

    public Vector2I GetCellAtlasCoords(Vector2I coords)
    {
        if (_tiles.TryGetValue((coords.X, coords.Y), out var tileType))
        {
            return tileType == TileType.Black ? new Vector2I(0, 0) : new Vector2I(1, 0);
        }
        return new Vector2I(-1, -1);
    }
}
